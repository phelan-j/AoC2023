use day5::*;
use std::collections::BTreeMap;
fn main() { if let Ok(lines) = read_lines("./input/input.txt") {
        let mut flattened = lines.flatten();
        let line = flattened.next().unwrap();
        let mut seeds = parse_to_vec(&line);
        let mut maps: Vec<BTreeMap<u32, (u32, u32)>> = Vec::new();
        let mut map: BTreeMap<u32, (u32, u32)> = BTreeMap::new();
        for line in flattened {
            let vec = parse_to_vec(&line);
            if vec.len() > 2 {
                map.insert(vec[1], (vec[0], vec[2]));
            } else if map.len() > 0 {
                maps.push(map);
                map = BTreeMap::new();
            }
        }
        if map.len() > 0 {
            maps.push(map);
        }
        for s in seeds.iter_mut() {
            for map in &maps {
                let sv = *s;
                let keys: Vec<&u32> = map.keys().clone().collect();
                let index = match keys.binary_search(&&sv) {
                    Ok(i) => i,
                    Err(i) => if i > 0 { i - 1 } else { 0 }
                };
                let &source = keys[index];
                let (destination, length) = map[&source];
                if source <= sv && sv < source + length {
                    *s = destination + (sv - source);
                }
            }
        }
        let mut s_min = seeds[0];
        for &s in seeds.iter() {
            if s < s_min { s_min = s; }
        }
        println!("{s_min}");
    }
}
